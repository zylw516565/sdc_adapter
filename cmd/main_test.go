package main

import (
	"sync/atomic"
	"testing"

	"github.com/sirupsen/logrus"
)

func Test_decodeUdpData(t *testing.T) {
	log.SetLevel(logrus.DebugLevel)

	type args struct {
		data      [][]byte
		totalPdus *atomic.Int64
	}
	tests := []struct {
		name    string
		args    args
		wantLen int
	}{
		{
			name: "one package",
			args: args{
				data: [][]byte{{
					// Message Header
					0x02, 0x04, // RPC ID
					0x02, 0x00, // RPC Type
					0x00, 0x00, 0x00, 0x00, // RPC Cookie
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x08, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					0x00, 0x00, 0x00, 0x00,
				}},
				totalPdus: &atomic.Int64{},
			},
			wantLen: 3,
		},
		{
			name: "half pdu package",
			args: args{
				data: [][]byte{{
					// Message Header
					0x02, 0x04, // RPC ID
					0x02, 0x00, // RPC Type
					0x00, 0x00, 0x00, 0x00, // RPC Cookie
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00, // Bus Id
					0x00, // Direction
				}, {
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
				}, {
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
				}, {
					0x00, 0x00, 0x00, 0x00, // Payload
				}},
				totalPdus: &atomic.Int64{},
			},
			wantLen: 4,
		},
		{
			name: "multiple header in one package",
			args: args{
				data: [][]byte{{
					// Message Header
					0x02, 0x04, // RPC ID
					0x02, 0x00, // RPC Type
					0x00, 0x00, 0x00, 0x00, // RPC Cookie
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x08, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					0x00, 0x00, 0x00, 0x00,
					// Message Header
					0x02, 0x04, // RPC ID
					0x02, 0x00, // RPC Type
					0x00, 0x00, 0x00, 0x00, // RPC Cookie
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x08, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					0x00, 0x00, 0x00, 0x00,
				}},
				totalPdus: &atomic.Int64{},
			},
			wantLen: 6,
		},
		{
			name: "multiple header in different packages",
			args: args{
				data: [][]byte{{
					// Message Header
					0x02, 0x04, // RPC ID
					0x02, 0x00, // RPC Type
					0x00, 0x00, 0x00, 0x00, // RPC Cookie
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x08, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					0x00, 0x00, 0x00, 0x00,
				}, {
					// Message Header
					0x02, 0x04, // RPC ID
					0x02, 0x00, // RPC Type
					0x00, 0x00, 0x00, 0x00, // RPC Cookie
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00, // Bus Id
					0x00, // Direction
				}, {
					0x00, 0x08, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					0x00, 0x00, 0x00, 0x00,
					// Message Header
					0x02, 0x04, // RPC ID
					0x02, 0x00, // RPC Type
					0x00, 0x00, 0x00, 0x00, // RPC Cookie
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x04, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					// Pdu
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp
					0x00, 0x00, 0x00, 0x00, // Can Id
					0x00,       // Bus Id
					0x00,       // Direction
					0x00, 0x08, // Length
					0x00, 0x00, 0x00, 0x00, // Payload
					0x00, 0x00, 0x00, 0x00,
				}},
				totalPdus: &atomic.Int64{},
			},
			wantLen: 9,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			for _, d := range tt.args.data {
				decodeUdpData(d, tt.args.totalPdus)
			}

			if tt.args.totalPdus.Load() != int64(tt.wantLen) {
				t.Errorf("decodeUdpData() = %v, want %v", tt.args.totalPdus.Load(), tt.wantLen)
			}
		})
	}
}
